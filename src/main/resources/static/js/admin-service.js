const token = $("meta[name='_csrf']").attr("content");
let currentPage = 1; // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
const pageSize = 12; // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const servicesContainer = document.querySelector('.services'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
const paginationContainer = document.querySelector(".pagination");
// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {

    addPageNumber(currentPage)

});

function addPageNumber(pageNumber) {
    fetch('/orders/getAllOrders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': token
        },
        body: JSON.stringify({ pageNumber, pageSize }),
    })
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok " + response.statusText);
            }
            return response.json(); // –ü–∞—Ä—Å–∏–º JSON
        })
        .then(data => {
            servicesContainer.innerHTML = '';
            data.baseOrder.forEach(order => {
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                const serviceCard = document.createElement('div');
                serviceCard.classList.add('service-card');

                // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const img = document.createElement('img');
                img.src = order.image || 'images/default.jpg'; // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                img.alt = order.title || 'Service Image';

                // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                const serviceInfo = document.createElement('div');
                serviceInfo.classList.add('service-info');

                const secondId = document.createElement('p');
                secondId.textContent = order.secondId;

                const title = document.createElement('h3');
                const maxLength = 20;
                let text = order.title;
                if (text.length > maxLength) {
                    text = text.substring(0, maxLength) + '...';
                }
                title.textContent = text;

                const description = document.createElement('p');
                text = order.description;
                if (text.length > maxLength) {
                    text = text.substring(0, maxLength) + '...';
                }
                description.textContent = text;

                const price = document.createElement('span');
                price.classList.add('price');
                price.textContent = `${order.basePrice.toFixed(2)}$`;

                // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                serviceInfo.appendChild(secondId);
                serviceInfo.appendChild(title);
                serviceInfo.appendChild(description);
                serviceInfo.appendChild(price);

                // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
                const serviceActions = document.createElement('div');
                serviceActions.classList.add('service-actions');

                const editButton = document.createElement('button');
                editButton.classList.add('edit-button', 'settings-button');
                editButton.textContent = '‚öôÔ∏è';

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∫–Ω–æ–ø–∫–∏
                editButton.dataset.orderTitle = order.title;
                editButton.dataset.orderDescription = order.description;
                editButton.dataset.orderPrice = order.basePrice;

                const deleteButton = document.createElement('button');
                deleteButton.classList.add('delete-button');
                deleteButton.textContent = 'üóëÔ∏è';

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
                serviceActions.appendChild(editButton);
                serviceActions.appendChild(deleteButton);

                // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                serviceCard.appendChild(img);
                serviceCard.appendChild(serviceInfo);
                serviceCard.appendChild(serviceActions);
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                servicesContainer.appendChild(serviceCard);

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                editButton.addEventListener('click', () => {
                    openEditModal(order, data.pageNumber);
                });
            });
            renderPagination(data.pageNumber, data.pageTotal);
        })
        .catch(error => {
            console.error("Error fetching services:", error);
        });
}

function openEditModal(order, pageNumber) {
    const modal = document.getElementById("modal");
    const titleInput = modal.querySelector("input[type='text']");
    const descriptionTextarea = modal.querySelector("textarea");
    const priceInput = modal.querySelector("input[type='number']");
    const saveBtn = modal.querySelector(".save-button")
    const modalTitle = modal.querySelector('h2')
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
    titleInput.value = order.title;
    descriptionTextarea.value = order.description;
    priceInput.value = order.basePrice;
    modalTitle.textContent = 'Edit Order Card #' + order.secondId;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.remove("hidden");
    modal.style.display = "flex";

    order.title = titleInput.textContent
    console.log(order);
    saveBtn.addEventListener('click',() => {
        order.title = titleInput.value
        order.description = descriptionTextarea.value
        order.basePrice = priceInput.value
        fetch(`/orders/saveEditingBaseOrder`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
            },
            body: JSON.stringify(order),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Network response was not ok " + response.statusText);
                }
                location.reload()
                return response.json(); // –ü–∞—Ä—Å–∏–º JSON
            })
    })
}